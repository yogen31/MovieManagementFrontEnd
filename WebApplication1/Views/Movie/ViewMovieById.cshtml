@using Microsoft.AspNetCore.Identity;
@model MovieManagementFrontEnd.ViewModels.MovieViewModel;
@inject SignInManager<IdentityUser> SignInManager;

@{
    int averageRating = Model.AverageRating;
    int isFavourite = Model.IsFavourite;
}
<!DOCTYPE html>
<html>
<head>
    <title>Movie Player Site</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <style>
        .rating span {
            font-size: 24px;
            color: gold;
            cursor: pointer;
            transition: color 0.3s;
        }

            .rating span:hover,
            .rating span:hover ~ span {
            }

        .reviews {
            margin-top: 20px;
        }

        .clicked {
            background-color: orange !important;
            color: white;
        }

        .unclicked {
            background-color: purple !important;
            color: white;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="mt-5">@Model.Title</h1>
        <p>@Model.Description</p>
        <p>Release Year: @Model.CreatedDateTime</p>
        <input id="movieId" hidden value="@Model.MovieId" />
        <div class="embed-responsive embed-responsive-16by9">
            <iframe class="embed-responsive-item" src="@Model.MovieLink" allowfullscreen></iframe>
        </div>
        @if (SignInManager.IsSignedIn(User))
        {
            <div class="text-right">
                <button type="button" class="btn" id="addToFavorites">
                </button>
            </div>
        }
        <div class="rating">
            <span class="star" data-value="1">&#9733;</span>
            <span class="star" data-value="2">&#9733;</span>
            <span class="star" data-value="3">&#9733;</span>
            <span class="star" data-value="4">&#9733;</span>
            <span class="star" data-value="5">&#9733;</span>
        </div>

        <div class="reviews">
            <h2>Reviews</h2>
            <ul class="list-unstyled">
                @if (Model.MovieReviews != null)
                {
                    @foreach (var item in Model.MovieReviews)
                    {
                        <li>
                            <strong>@item.UserName</strong>
                            <p>@item.ReviewComment</p>
                        </li>
                    }
                }

            </ul>

            <form id="reviewForm">

                <div class="form-group">
                    <textarea class="form-control" id="reviewContent" placeholder="Write your review..." required></textarea>
                </div>
                <h3 class="btn btn-primary" onclick="AddComments()"
                    id="submitReview" name="submitReview">
                    Submit Review
                </h3>
            </form>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

    <script>
        $(document).ready(function () {
            var isFavourite = @isFavourite;

            var $addToFavorites = $('#addToFavorites');
            if (isFavourite === 0) {
                $addToFavorites.addClass('unclicked');
                $addToFavorites.text('Add to Favorites');
            } else if (isFavourite === 1) {
                $addToFavorites.addClass('clicked');
                $addToFavorites.text('Added to Favorites');
            }
            updateStarColors(@averageRating);
            $('.star').on('click', function () {
                var ratingValue = $(this).data('value');
                // Make the API request with the rating value
                updateStarColors(ratingValue);
                sendRating(ratingValue);
            });
        });

        function updateStarColors(ratingValue) {
            $('.star').each(function () {
                var starValue = $(this).data('value');
                if (starValue <= ratingValue) {
                    $(this).css('color', 'orange');
                } else {
                    $(this).css('color', 'gold');
                }
            });
        }
        function sendRating(ratingValue) {
            var movie = document.getElementById("movieId");
            var movieIdValue = movie.value;
            if (ratingValue && movieIdValue) {

                axios.post('/Movie/AddRating?Rating=' + ratingValue + '&MovieId=' + movieIdValue, null)
                    .then(function (response) {
                        // Handle the response here if needed
                        console.log(response.data);
                        window.location.reload();
                        // Redirect to the desired page
                    })
                    .catch(function (error) {
                        // Handle any errors here
                        console.log(error);
                    });
            }
        }
        $('#addToFavorites').on('click', function () {
            var isFavourite = @isFavourite;
            var movie = document.getElementById("movieId");
            var movieIdValue = movie.value;
            console.log(isFavourite);
            if (isFavourite === 0) {

                $(this).removeClass('unclicked');
                $(this).addClass('clicked');
                $(this).text('Added to Favourites');
                isFavourite=1;
                axios.post('/Movie/AddUserFavourite?MovieId=' + movieIdValue + '&isFavourite=' + isFavourite, null)
                    .then(function (response) {
                        // Handle the response here if needed
                        console.log(response.data);
                        window.location.reload();
                        // Redirect to the desired page
                    })
                    .catch(function (error) {
                        // Handle any errors here
                        console.log(error);
                    });
            }
            else{
                $(this).removeClass('clicked');
                $(this).addClass('unclicked');
                $(this).text('Add to Favourites');
                isFavourite=0;
                 axios.post('/Movie/AddUserFavourite?MovieId=' + movieIdValue + '&isFavourite=' + isFavourite, null)
                    .then(function (response) {
                        // Handle the response here if needed
                        console.log(response.data);
                        window.location.reload();
                        // Redirect to the desired page
                    })
                    .catch(function (error) {
                        // Handle any errors here
                        console.log(error);
                    });
            }
        });
        // Function to handle form submission and add a new review
        function AddComments() {
            var comment = document.getElementById("reviewContent");
            var movie = document.getElementById("movieId");
            var commentValue = comment.value;
            var movieIdValue = movie.value;
            if (commentValue && movieIdValue) {

                axios.post('/Movie/AddReview?MovieId=' + movieIdValue + '&ReviewComment=' + commentValue, null)
                    .then(function (response) {
                        // Handle the response here if needed
                        console.log(response.data);
                        window.location.reload();
                        // Redirect to the desired page
                    })
                    .catch(function (error) {
                        // Handle any errors here
                        console.log(error);
                    });
            }
        }

    </script>
</body>
</html>

